// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f cluster/kind/.kue/crds.yaml

package v1

import "strings"

// A Certificate resource should be created to ensure an up to
// date and signed x509 certificate is stored in the Kubernetes
// Secret resource named in `spec.secretName`.
// The stored certificate will be renewed before it expires (as
// configured by `spec.renewBefore`).
#Certificate: {
	// APIVersion defines the versioned schema of this representation
	// of an object. Servers should convert recognized schemas to the
	// latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "cert-manager.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents. Servers may infer this from the endpoint
	// the client submits requests to. Cannot be updated. In
	// CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "Certificate"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Desired state of the Certificate resource.
	spec!: #CertificateSpec
}

// Desired state of the Certificate resource.
#CertificateSpec: {
	// AdditionalOutputFormats defines extra output formats of the
	// private key and signed certificate chain to be written to this
	// Certificate's target Secret. This is an Alpha Feature and is
	// only enabled with the
	// `--feature-gates=AdditionalCertificateOutputFormats=true`
	// option on both the controller and webhook components.
	additionalOutputFormats?: [...{
		// Type is the name of the format type that should be written to
		// the Certificate's target Secret.
		type: "DER" | "CombinedPEM"
	}]

	// CommonName is a common name to be used on the Certificate. The
	// CommonName should have a length of 64 characters or fewer to
	// avoid generating invalid CSRs. This value is ignored by TLS
	// clients when any subject alt name is set. This is x509
	// behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
	commonName?: string

	// DNSNames is a list of DNS subjectAltNames to be set on the
	// Certificate.
	dnsNames?: [...string]

	// The requested 'duration' (i.e. lifetime) of the Certificate.
	// This option may be ignored/overridden by some issuer types. If
	// unset this defaults to 90 days. Certificate will be renewed
	// either 2/3 through its duration or `renewBefore` period before
	// its expiry, whichever is later. Minimum accepted duration is 1
	// hour. Value must be in units accepted by Go time.ParseDuration
	// https://golang.org/pkg/time/#ParseDuration
	duration?: string

	// EmailAddresses is a list of email subjectAltNames to be set on
	// the Certificate.
	emailAddresses?: [...string]

	// EncodeUsagesInRequest controls whether key usages should be
	// present in the CertificateRequest
	encodeUsagesInRequest?: bool

	// IPAddresses is a list of IP address subjectAltNames to be set
	// on the Certificate.
	ipAddresses?: [...string]

	// IsCA will mark this Certificate as valid for certificate
	// signing. This will automatically add the `cert sign` usage to
	// the list of `usages`.
	isCA?: bool

	// IssuerRef is a reference to the issuer for this certificate. If
	// the `kind` field is not set, or set to `Issuer`, an Issuer
	// resource with the given name in the same namespace as the
	// Certificate will be used. If the `kind` field is set to
	// `ClusterIssuer`, a ClusterIssuer with the provided name will
	// be used. The `name` field in this stanza is required at all
	// times.
	issuerRef: {
		// Group of the resource being referred to.
		group?: string

		// Kind of the resource being referred to.
		kind?: string

		// Name of the resource being referred to.
		name: string
	}

	// Keystores configures additional keystore output formats stored
	// in the `secretName` Secret resource.
	keystores?: {
		// JKS configures options for storing a JKS keystore in the
		// `spec.secretName` Secret resource.
		jks?: {
			// Create enables JKS keystore creation for the Certificate. If
			// true, a file named `keystore.jks` will be created in the
			// target Secret resource, encrypted using the password stored in
			// `passwordSecretRef`. The keystore file will only be updated
			// upon re-issuance. A file named `truststore.jks` will also be
			// created in the target Secret resource, encrypted using the
			// password stored in `passwordSecretRef` containing the issuing
			// Certificate Authority
			create: bool

			// PasswordSecretRef is a reference to a key in a Secret resource
			// containing the password used to encrypt the JKS keystore.
			passwordSecretRef: {
				// The key of the entry in the Secret resource's `data` field to
				// be used. Some instances of this field may be defaulted, in
				// others it may be required.
				key?: string

				// Name of the resource being referred to. More info:
				// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
				name: string
			}
		}

		// PKCS12 configures options for storing a PKCS12 keystore in the
		// `spec.secretName` Secret resource.
		pkcs12?: {
			// Create enables PKCS12 keystore creation for the Certificate. If
			// true, a file named `keystore.p12` will be created in the
			// target Secret resource, encrypted using the password stored in
			// `passwordSecretRef`. The keystore file will only be updated
			// upon re-issuance. A file named `truststore.p12` will also be
			// created in the target Secret resource, encrypted using the
			// password stored in `passwordSecretRef` containing the issuing
			// Certificate Authority
			create: bool

			// PasswordSecretRef is a reference to a key in a Secret resource
			// containing the password used to encrypt the PKCS12 keystore.
			passwordSecretRef: {
				// The key of the entry in the Secret resource's `data` field to
				// be used. Some instances of this field may be defaulted, in
				// others it may be required.
				key?: string

				// Name of the resource being referred to. More info:
				// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
				name: string
			}
		}
	}

	// LiteralSubject is an LDAP formatted string that represents the
	// [X.509 Subject
	// field](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6).
	// Use this *instead* of the Subject field if you need to ensure
	// the correct ordering of the RDN sequence, such as when issuing
	// certs for LDAP authentication. See
	// https://github.com/cert-manager/cert-manager/issues/3203,
	// https://github.com/cert-manager/cert-manager/issues/4424. This
	// field is alpha level and is only supported by cert-manager
	// installations where LiteralCertificateSubject feature gate is
	// enabled on both cert-manager controller and webhook.
	literalSubject?: string

	// Options to control private keys used for the Certificate.
	privateKey?: {
		// Algorithm is the private key algorithm of the corresponding
		// private key for this certificate. If provided, allowed values
		// are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is
		// specified and `size` is not provided, key size of 256 will be
		// used for `ECDSA` key algorithm and key size of 2048 will be
		// used for `RSA` key algorithm. key size is ignored when using
		// the `Ed25519` key algorithm.
		algorithm?: "RSA" | "ECDSA" | "Ed25519"

		// The private key cryptography standards (PKCS) encoding for this
		// certificate's private key to be encoded in. If provided,
		// allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and
		// PKCS#8, respectively. Defaults to `PKCS1` if not specified.
		encoding?: "PKCS1" | "PKCS8"

		// RotationPolicy controls how private keys should be regenerated
		// when a re-issuance is being processed. If set to Never, a
		// private key will only be generated if one does not already
		// exist in the target `spec.secretName`. If one does exists but
		// it does not have the correct algorithm or size, a warning will
		// be raised to await user intervention. If set to Always, a
		// private key matching the specified requirements will be
		// generated whenever a re-issuance occurs. Default is 'Never'
		// for backward compatibility.
		rotationPolicy?: "Never" | "Always"

		// Size is the key bit size of the corresponding private key for
		// this certificate. If `algorithm` is set to `RSA`, valid values
		// are `2048`, `4096` or `8192`, and will default to `2048` if
		// not specified. If `algorithm` is set to `ECDSA`, valid values
		// are `256`, `384` or `521`, and will default to `256` if not
		// specified. If `algorithm` is set to `Ed25519`, Size is
		// ignored. No other values are allowed.
		size?: int
	}

	// How long before the currently issued certificate's expiry
	// cert-manager should renew the certificate. The default is 2/3
	// of the issued certificate's duration. Minimum accepted value
	// is 5 minutes. Value must be in units accepted by Go
	// time.ParseDuration https://golang.org/pkg/time/#ParseDuration
	renewBefore?: string

	// revisionHistoryLimit is the maximum number of
	// CertificateRequest revisions that are maintained in the
	// Certificate's history. Each revision represents a single
	// `CertificateRequest` created by this Certificate, either when
	// it was created, renewed, or Spec was changed. Revisions will
	// be removed by oldest first if the number of revisions exceeds
	// this number. If set, revisionHistoryLimit must be a value of
	// `1` or greater. If unset (`nil`), revisions will not be
	// garbage collected. Default value is `nil`.
	revisionHistoryLimit?: int

	// SecretName is the name of the secret resource that will be
	// automatically created and managed by this Certificate
	// resource. It will be populated with a private key and
	// certificate, signed by the denoted issuer.
	secretName: string

	// SecretTemplate defines annotations and labels to be copied to
	// the Certificate's Secret. Labels and annotations on the Secret
	// will be changed as they appear on the SecretTemplate when
	// added or removed. SecretTemplate annotations are added in
	// conjunction with, and cannot overwrite, the base set of
	// annotations cert-manager sets on the Certificate's Secret.
	secretTemplate?: {
		// Annotations is a key value map to be copied to the target
		// Kubernetes Secret.
		annotations?: {
			[string]: string
		}

		// Labels is a key value map to be copied to the target Kubernetes
		// Secret.
		labels?: {
			[string]: string
		}
	}

	// Full X509 name specification
	// (https://golang.org/pkg/crypto/x509/pkix/#Name).
	subject?: {
		// Countries to be used on the Certificate.
		countries?: [...string]

		// Cities to be used on the Certificate.
		localities?: [...string]

		// Organizational Units to be used on the Certificate.
		organizationalUnits?: [...string]

		// Organizations to be used on the Certificate.
		organizations?: [...string]

		// Postal codes to be used on the Certificate.
		postalCodes?: [...string]

		// State/Provinces to be used on the Certificate.
		provinces?: [...string]

		// Serial number to be used on the Certificate.
		serialNumber?: string

		// Street addresses to be used on the Certificate.
		streetAddresses?: [...string]
	}

	// URIs is a list of URI subjectAltNames to be set on the
	// Certificate.
	uris?: [...string]

	// Usages is the set of x509 usages that are requested for the
	// certificate. Defaults to `digital signature` and `key
	// encipherment` if not specified.
	usages?: [..."signing" | "digital signature" | "content commitment" | "key encipherment" | "key agreement" | "data encipherment" | "cert sign" | "crl sign" | "encipher only" | "decipher only" | "any" | "server auth" | "client auth" | "code signing" | "email protection" | "s/mime" | "ipsec end system" | "ipsec tunnel" | "ipsec user" | "timestamping" | "ocsp signing" | "microsoft sgc" | "netscape sgc"]
}
